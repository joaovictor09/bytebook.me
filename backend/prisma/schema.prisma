// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  ADMIN
  MEMBER
}

model User {
  id           String   @id @default(uuid())
  name         String
  email        String   @unique
  passwordHash String   @map("password_hash")
  role         Role     @default(MEMBER)
  created_at   DateTime @default(now())

  // Relacionamentos de conex√µes
  sentConnections     Connection[]      @relation("ConnectionSender")
  receivedConnections Connection[]      @relation("ConnectionRecipient")
  sentScraps          Scrap[]           @relation("ScrapSender")
  receivedScraps      Scrap[]           @relation("ScrapRecipient")
  scrapComments       ScrapComment[]
  communities         Community[]
  communityMembers    CommunityMember[]
  topics              Topic[]
  topicComments       TopicComment[]

  @@map("users")
}

enum ConnectionStatus {
  PENDING
  ACCEPTED
  DECLINED
}

model Connection {
  id          String           @id @default(uuid())
  senderId    String           @map("sender_id")
  recipientId String           @map("recipient_id")
  status      ConnectionStatus @default(PENDING)
  createdAt   DateTime         @default(now()) @map("created_at")
  updatedAt   DateTime         @updatedAt @map("updated_at")

  sender    User @relation(fields: [senderId], references: [id], name: "ConnectionSender", onDelete: Cascade)
  recipient User @relation(fields: [recipientId], references: [id], name: "ConnectionRecipient", onDelete: Cascade)

  @@unique([senderId, recipientId])
  @@map("connections")
}

model Scrap {
  id        String   @id @default(uuid())
  message   String
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  senderId    String @map("sender_id")
  recipientId String @map("recipient_id")

  sender        User           @relation(fields: [senderId], references: [id], name: "ScrapSender", onDelete: Cascade)
  recipient     User           @relation(fields: [recipientId], references: [id], name: "ScrapRecipient", onDelete: Cascade)
  scrapComments ScrapComment[]

  @@map("scraps")
}

model ScrapComment {
  id        String   @id @default(uuid())
  message   String
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")
  senderId  String   @map("sender_id")
  scrapId   String   @map("scrap_id")

  scrap  Scrap @relation(fields: [scrapId], references: [id])
  sender User  @relation(fields: [senderId], references: [id], onDelete: Cascade)

  @@map("scrap_comments")
}

model Community {
  id          String   @id @default(uuid())
  name        String
  description String
  ownerId     String   @map("owner_id")
  createdAt   DateTime @default(now()) @map("created_at")
  memberCount Int      @default(0) @map("member_count")

  owner   User              @relation(fields: [ownerId], references: [id], onDelete: Cascade)
  members CommunityMember[]
  topics  Topic[]

  @@map("communities")
}

model CommunityMember {
  id          String   @id @default(uuid())
  communityId String   @map("community_id")
  userId      String   @map("user_id")
  joinedAt    DateTime @default(now()) @map("joined_at")

  community Community @relation(fields: [communityId], references: [id], onDelete: Cascade)
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([communityId, userId])
  @@map("community_members")
}

model Topic {
  id          String   @id @default(uuid())
  title       String
  content     String
  communityId String   @map("community_id")
  authorId    String   @map("author_id")
  createdAt   DateTime @default(now()) @map("created_at")

  community Community      @relation(fields: [communityId], references: [id], onDelete: Cascade)
  author    User           @relation(fields: [authorId], references: [id], onDelete: Cascade)
  comments  TopicComment[]

  @@map("topics")
}

model TopicComment {
  id        String   @id @default(uuid())
  message   String
  topicId   String   @map("topic_id")
  authorId  String   @map("author_id")
  createdAt DateTime @default(now()) @map("created_at")

  topic  Topic @relation(fields: [topicId], references: [id], onDelete: Cascade)
  author User  @relation(fields: [authorId], references: [id], onDelete: Cascade)

  @@map("topic_comments")
}
